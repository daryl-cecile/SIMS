<!doctype html>
<html lang="en">
<head>
    <%- include('../partials/meta') %>
    <title>Manage Inventory</title>
    <%- include('../partials/imports') %>
    <link rel="stylesheet" href="/public/styles/manage.css">
    <script src="/public/scripts/XInventoryTable.js"></script>
</head>
<body>
<%- include('../partials/nav', {isAdmin:true, showLogo:true}) %>

<section class="f v padded extra" id="main-container" style="overflow: auto" >
    <div class="f h quick-bar">
        <h1>Inventory</h1>
        <smart-input id="filter-bar" name="find" placeholder="Find Item" type="search" style="width: 220px; position: absolute; transform: translateX(-50%); left: 50%"></smart-input>
        <button style="height: 38px" id="delitem-btn">Delete selected</button>
        <button style="height: 38px" onclick="location.href='/transaction/return'">Process Return</button>
        <button style="height: 38px" class="link" id="newitem-btn">+ New item</button>
    </div>

    <inventory-table id="table"></inventory-table>
</section>

<%- include('../partials/footer') %>

<script>

    async function getItems(){
        return new Promise(resolve => {
            $.get("/api/items/itemlist",{
                CSRF_Token : Tools.csrfToken()
            }, result => {
                resolve(result);
            });
        })
    }

    (async function(){
        let table = $("#table").get(0);
        let response = await getItems();
        let delBtn = $('#delitem-btn').hide();
        for (let inventoryEntry of response.payload.items){
            let entry = document.createElement("inventory-item");
            entry.model = inventoryEntry;
            table.addItem(entry);
        }

        function filterItems(val){
            table.items.forEach(child => {
                if (val.trim().length === 0){
                    $(child).show();
                }
                else if ( child.values.name.toLowerCase().indexOf(val) > -1 || child.values.description.toLowerCase().indexOf(val) > -1 ){
                    $(child).show();
                }
                else{
                    $(child).hide();
                }
            })
        }

        $('#filter-bar').on('input', function(ev){
            let val = ev.originalEvent.detail.value.toLowerCase();
            filterItems(val);
        });

        if (location.hash.length > 1){
            filterItems(decodeURI(location.hash.substr(1).toLowerCase()));
        }

        delBtn.on('click',function(){
            if (window.confirm("Are you sure you want to delete this?")){
                $.post("/api/items/delete",{
                    CSRF_Token : Tools.csrfToken(),
                    itemIdCollection : table.selectedItems.map(itm => itm.values.id)
                }, result => {
                    console.log(result);
                    location.reload();
                });
            }
        });

        $('#newitem-btn').on('click',function(){
            table.createNew();
            setTimeout(()=>{
                $('#main-container').get(0).scrollTo({
                    behavior: "smooth",
                    top: 1000
                })
            },250);
        });

        table.addEventListener('selectionchanged', ev=>{
            if (ev.detail.length > 0){
                delBtn.show();
            }
            else{
                delBtn.hide();
            }
        });

        table.addEventListener('save',ev => {
            console.log("save this",ev.detail.values);

            $.post("/api/items/update",{
                CSRF_Token : Tools.csrfToken(),
                entry : ev.detail.values
            }, result => {
                console.warn(result);
                ev.detail.callback();
            });

        });

        table.addEventListener('newfile', ev => {
            console.log(ev.detail.file);

            let fd = new FormData();
            fd.append("file", ev.detail.file);

            $.ajax({
                url: "/api/items/save-image",
                contentType: false,
                processData: false,
                data: fd,
                type: "POST",
                success: (m)=>{
                    console.warn(m.payload.name);
                    ev.detail.callback(`/public/storage/${m.payload.name}`);
                },
                headers:{
                    "CSRF-Token" : Tools.csrfToken()
                }
            });

        });
    })();
</script>

</body>
</html>