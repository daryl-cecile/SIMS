<!doctype html>
<html lang="en">
<head>
    <%- include('../partials/meta') %>
    <title>POS</title>
    <%- include('../partials/imports') %>
	<link rel="stylesheet" href="/public/styles/xbasket.css">

    <script src="/public/scripts/XCatalog.js"></script>
    <script src="/public/scripts/XBasket.js"></script>
</head>
<body>

    <section class="f h subtle-bg" style="overflow: hidden">
        <x-basket id="basket"></x-basket>

        <div class="f v greedy relative">
            <%- include('../partials/nav', {isAdmin:false, showLogo:false}) %>
            <section class="padded">
                <smart-input id="filter-bar" name="find" placeholder="Find Item" type="search"></smart-input>

                <x-catalog id="catalog"></x-catalog>
            </section>
        </div>
    </section>

    <%- include('../partials/footer') %>

    <script>

        let basket = $("#basket").get(0);
        let catalog = $("#catalog").get(0);
        let itemCollection = new BasketCollection();
        let catalogCollection = new CatalogCollection();

        basket.attachCollection(itemCollection);

        basket.addEventListener('checkout', function(ev){
            $.post("/api/transactions/issue",{
                CSRF_Token : Tools.csrfToken(),
                data : ev.detail.items
            }, result => {
                if (result.isSuccessful){
                    location.href = '/confirm/' + result.payload.transactionId;
                }
                console.log(result);
            });
        });

        async function getItems(){
            return new Promise(resolve => {
                $.get("/api/items/itemlist",{
                    CSRF_Token : Tools.csrfToken()
                }, result => {
                    resolve(result.payload.items);
                });
            });
        }

        $('#filter-bar').on('input', ev => {
            filter(ev.originalEvent.detail.value);
        })

        function filter(term){
            term = term.toLowerCase();
            catalog.catalogChildren.forEach(c => {
                if (term.trim().length === 0){
                    c.style.display = 'initial';
                }
                else{
                    if (c.name.toLowerCase().indexOf(term) > -1 || c.description.toLowerCase().indexOf(term) > -1){
                        c.style.display = 'initial';
                    }
                    else{
                        c.style.display = 'none';
                    }
                }
            })
        }

        catalog.addEventListener('itempicked',ev => {
            addToBasket(ev.detail);
        });

        async function addToBasket(item){
            if (item && basket.updateChild(item.id, itm => { return itm.quantity++ } )){
                return;
            }

            itemCollection.addItem( new BasketItem({
                name: item.name,
                description: item.description,
                quantity: 1,
                itemReference: item.id,
                imageUrl : item.previewImg
            }) );

            basket.updateVisuals();
        }

        async function seedCatalog(){
            let col = await getItems();

            col.forEach(item => {
                if (item.unitCount === 0) return;
                catalogCollection.addItem( new CatalogItem({
                    entry : item
                }) );
            });

            catalog.attachCollection(catalogCollection);
        }

        seedCatalog();

	</script>


</body>
</html>